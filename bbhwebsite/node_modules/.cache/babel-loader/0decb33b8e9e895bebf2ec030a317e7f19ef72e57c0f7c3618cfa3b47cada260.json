{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teste\\\\Desktop\\\\Code\\\\BBH\\\\bbhwebsite\\\\src\\\\components\\\\AddContestant.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContestantsPage() {\n  _s();\n  const [contestants, setContestants] = useState([]);\n  const addNewContestant = async () => {\n    // Define the blank contestant data\n    const newContestantData = {\n      name: '',\n      // Assuming 'name' can be empty initially\n      image_url: '',\n      eviction_image_url: '',\n      status: 'Sem Status' // Assuming there's a default status for new contestants\n    };\n    try {\n      // Make an API call to the backend to add the new contestant\n      const response = await fetch('http://127.0.0.1:5000/create-contestant', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newContestantData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add new contestant');\n      }\n\n      // Optionally, fetch the updated list of contestants from the backend\n      // Or update the local state to reflect the addition\n      const addedContestant = await response.json(); // Assuming your API returns the added contestant\n      setContestants([...contestants, addedContestant]);\n    } catch (error) {\n      console.error('Error adding new contestant:', error);\n      // Handle the error (e.g., show an error message)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNewContestant,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(ContestantsPage, \"lcRCS4DKXvBva2jIpIrhqR9ZEqg=\");\n_c = ContestantsPage;\nexport default ContestantsPage;\nvar _c;\n$RefreshReg$(_c, \"ContestantsPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ContestantsPage","_s","contestants","setContestants","addNewContestant","newContestantData","name","image_url","eviction_image_url","status","response","fetch","method","headers","body","JSON","stringify","ok","Error","addedContestant","json","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/teste/Desktop/Code/BBH/bbhwebsite/src/components/AddContestant.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction ContestantsPage() {\r\n  const [contestants, setContestants] = useState([]);\r\n\r\n  const addNewContestant = async () => {\r\n    // Define the blank contestant data\r\n    const newContestantData = {\r\n      name: '', // Assuming 'name' can be empty initially\r\n      image_url: '',\r\n      eviction_image_url: '',\r\n      status: 'Sem Status', // Assuming there's a default status for new contestants\r\n    };\r\n\r\n    try {\r\n      // Make an API call to the backend to add the new contestant\r\n      const response = await fetch('http://127.0.0.1:5000/create-contestant', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newContestantData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add new contestant');\r\n      }\r\n\r\n      // Optionally, fetch the updated list of contestants from the backend\r\n      // Or update the local state to reflect the addition\r\n      const addedContestant = await response.json(); // Assuming your API returns the added contestant\r\n      setContestants([...contestants, addedContestant]);\r\n    } catch (error) {\r\n      console.error('Error adding new contestant:', error);\r\n      // Handle the error (e.g., show an error message)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={addNewContestant}>+</button>\r\n      {/* Render contestants */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContestantsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC;IACA,MAAMC,iBAAiB,GAAG;MACxBC,IAAI,EAAE,EAAE;MAAE;MACVC,SAAS,EAAE,EAAE;MACbC,kBAAkB,EAAE,EAAE;MACtBC,MAAM,EAAE,YAAY,CAAE;IACxB,CAAC;IAED,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,iBAAiB;MACxC,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;;MAEA;MACA;MACA,MAAMC,eAAe,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;MAC/CjB,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEiB,eAAe,CAAC,CAAC;IACnD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,eACExB,OAAA;MAAQyB,OAAO,EAAEpB,gBAAiB;MAAAmB,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE1C,CAAC;AAEV;AAAC3B,EAAA,CA1CQD,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AA4CxB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}