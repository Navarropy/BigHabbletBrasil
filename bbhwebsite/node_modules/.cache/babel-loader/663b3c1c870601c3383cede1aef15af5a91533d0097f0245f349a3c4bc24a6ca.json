{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ContestantsPage(){const[contestants,setContestants]=useState([]);const addNewContestant=async()=>{// Define the blank contestant data\nconst newContestantData={name:'?',// Assuming 'name' can be empty initially\nimage_url:'blob:https://imgur.com/50d884c7-bb33-4145-8514-eedd153af37a',eviction_image_url:'',status:'Sem Status'// Assuming there's a default status for new contestants\n};try{// Make an API call to the backend to add the new contestant\nconst response=await fetch('http://127.0.0.1:5000/create-contestant',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newContestantData)});if(!response.ok){throw new Error('Failed to add new contestant');}// Optionally, fetch the updated list of contestants from the backend\n// Or update the local state to reflect the addition\nconst addedContestant=await response.json();// Assuming your API returns the added contestant\nsetContestants([...contestants,addedContestant]);}catch(error){console.error('Error adding new contestant:',error);// Handle the error (e.g., show an error message)\n}};useEffect(()=>{const fetchContestants=async()=>{try{const response=await fetch('http://127.0.0.1:5000/contestants');if(!response.ok){throw new Error('Failed to fetch contestants');}const data=await response.json();setContestants(data);}catch(error){console.error('Error fetching contestants:',error);}};fetchContestants();},[]);const updateContestant=async(id,updatedContestant)=>{try{const response=await fetch(\"http://127.0.0.1:5000/contestants/\".concat(id),{method:'PUT',// Assuming your backend supports PUT requests for updates\nheaders:{'Content-Type':'application/json'},body:JSON.stringify(updatedContestant)});if(!response.ok){throw new Error('Failed to update contestant');}// Refetch contestants to reflect the update\n// Alternatively, you can update the state locally without refetching\nconst updatedData=await response.json();setContestants(contestants.map(contestant=>contestant.id===id?updatedData:contestant));}catch(error){console.error('Error updating contestant:',error);}};const handleSubmit=(e,id)=>{const formData=new FormData(e.target);const updatedContestant=Object.fromEntries(formData.entries());updateContestant(id,updatedContestant);};return/*#__PURE__*/_jsxs(\"div\",{children:[contestants.map(contestant=>/*#__PURE__*/_jsxs(\"form\",{onSubmit:e=>handleSubmit(e,contestant.id),children:[/*#__PURE__*/_jsx(\"input\",{name:\"name\",defaultValue:contestant.name,placeholder:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{name:\"image_url\",defaultValue:contestant.image_url,placeholder:\"Image URL\"}),/*#__PURE__*/_jsx(\"input\",{name:\"eviction_image_url\",defaultValue:contestant.eviction_image_url,placeholder:\"Eviction Image URL\"}),/*#__PURE__*/_jsxs(\"select\",{name:\"status\",defaultValue:contestant.status,children:[/*#__PURE__*/_jsx(\"option\",{value:\"Emparedado\",children:\"Emparedado\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Eliminado\",children:\"Eliminado\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Anjo\",children:\"Anjo\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Lider\",children:\"L\\xEDder\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Casa de vidro\",children:\"Casa de Vidro\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Sem Status\",children:\"Sem Status\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Update\"})]},contestant.id)),/*#__PURE__*/_jsx(\"button\",{onClick:addNewContestant,children:\"+\"})]});}export default ContestantsPage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","ContestantsPage","contestants","setContestants","addNewContestant","newContestantData","name","image_url","eviction_image_url","status","response","fetch","method","headers","body","JSON","stringify","ok","Error","addedContestant","json","error","console","fetchContestants","data","updateContestant","id","updatedContestant","concat","updatedData","map","contestant","handleSubmit","e","formData","FormData","target","Object","fromEntries","entries","children","onSubmit","defaultValue","placeholder","value","type","onClick"],"sources":["C:/Users/teste/Desktop/Code/BBH/bbhwebsite/src/components/AddContestant.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction ContestantsPage() {\r\n  const [contestants, setContestants] = useState([]);\r\n\r\n  const addNewContestant = async () => {\r\n    // Define the blank contestant data\r\n    const newContestantData = {\r\n      name: '?', // Assuming 'name' can be empty initially\r\n      image_url: 'blob:https://imgur.com/50d884c7-bb33-4145-8514-eedd153af37a',\r\n      eviction_image_url: '',\r\n      status: 'Sem Status', // Assuming there's a default status for new contestants\r\n    };\r\n\r\n    try {\r\n      // Make an API call to the backend to add the new contestant\r\n      const response = await fetch('http://127.0.0.1:5000/create-contestant', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newContestantData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add new contestant');\r\n      }\r\n\r\n      // Optionally, fetch the updated list of contestants from the backend\r\n      // Or update the local state to reflect the addition\r\n      const addedContestant = await response.json(); // Assuming your API returns the added contestant\r\n      setContestants([...contestants, addedContestant]);\r\n    } catch (error) {\r\n      console.error('Error adding new contestant:', error);\r\n      // Handle the error (e.g., show an error message)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchContestants = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/contestants');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch contestants');\r\n        }\r\n        const data = await response.json();\r\n        setContestants(data);\r\n      } catch (error) {\r\n        console.error('Error fetching contestants:', error);\r\n      }\r\n    };\r\n\r\n    fetchContestants();\r\n  }, []);\r\n\r\n  const updateContestant = async (id, updatedContestant) => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/contestants/${id}`, {\r\n        method: 'PUT', // Assuming your backend supports PUT requests for updates\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedContestant),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update contestant');\r\n      }\r\n\r\n      // Refetch contestants to reflect the update\r\n      // Alternatively, you can update the state locally without refetching\r\n      const updatedData = await response.json();\r\n      setContestants(contestants.map(contestant => contestant.id === id ? updatedData : contestant));\r\n    } catch (error) {\r\n      console.error('Error updating contestant:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e, id) => {\r\n    const formData = new FormData(e.target);\r\n    const updatedContestant = Object.fromEntries(formData.entries());\r\n    updateContestant(id, updatedContestant);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {contestants.map(contestant => (\r\n        <form key={contestant.id} onSubmit={(e) => handleSubmit(e, contestant.id)}>\r\n          <input name=\"name\" defaultValue={contestant.name} placeholder=\"Name\" />\r\n          <input name=\"image_url\" defaultValue={contestant.image_url} placeholder=\"Image URL\" />\r\n          <input name=\"eviction_image_url\" defaultValue={contestant.eviction_image_url} placeholder=\"Eviction Image URL\" />\r\n          <select name=\"status\" defaultValue={contestant.status}>\r\n            <option value=\"Emparedado\">Emparedado</option>\r\n            <option value=\"Eliminado\">Eliminado</option>\r\n            <option value=\"Anjo\">Anjo</option>\r\n            <option value=\"Lider\">LÃ­der</option>\r\n            <option value=\"Casa de vidro\">Casa de Vidro</option>\r\n            <option value=\"Sem Status\">Sem Status</option>\r\n          </select>\r\n          <button type=\"submit\">Update</button>\r\n        </form>\r\n      ))}\r\n      <button onClick={addNewContestant}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContestantsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}