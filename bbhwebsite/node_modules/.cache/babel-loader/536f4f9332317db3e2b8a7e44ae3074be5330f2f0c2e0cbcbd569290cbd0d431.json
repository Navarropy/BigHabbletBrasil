{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teste\\\\Desktop\\\\Code\\\\BBH\\\\bbhwebsite\\\\src\\\\components\\\\PostsList.js\",\n  _s = $RefreshSig$();\n// components/PostsList.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostsList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/posts');\n        if (!response.ok) throw new Error('Data could not be fetched!');\n        const posts = await response.json();\n        setPosts(posts);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), posts.length ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/posts/${post.id}`,\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), \" - \", post.body]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts/new\",\n      children: \"Create a New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(PostsList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","PostsList","_s","posts","setPosts","fetchPosts","response","fetch","ok","Error","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","to","id","title","body","_c","$RefreshReg$"],"sources":["C:/Users/teste/Desktop/Code/BBH/bbhwebsite/src/components/PostsList.js"],"sourcesContent":["// components/PostsList.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PostsList() {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/posts');\r\n        if (!response.ok) throw new Error('Data could not be fetched!');\r\n        \r\n        const posts = await response.json();\r\n        setPosts(posts);\r\n      } catch (error) {\r\n        console.error('Error fetching posts:', error);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  return (\r\n    <div>\r\n      <h1>Posts</h1>\r\n      {posts.length ? (\r\n        <ul>\r\n          {posts.map(post => (\r\n            <li key={post.id}>\r\n              <Link to={`/posts/${post.id}`}>{post.title}</Link> - {post.body}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No posts found</p>\r\n      )}\r\n      <Link to=\"/posts/new\">Create a New Post</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostsList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAE/D,MAAMN,KAAK,GAAG,MAAMG,QAAQ,CAACI,IAAI,CAAC,CAAC;QACnCN,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDN,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbd,KAAK,CAACe,MAAM,gBACXlB,OAAA;MAAAa,QAAA,EACGV,KAAK,CAACgB,GAAG,CAACC,IAAI,iBACbpB,OAAA;QAAAa,QAAA,gBACEb,OAAA,CAACF,IAAI;UAACuB,EAAE,EAAG,UAASD,IAAI,CAACE,EAAG,EAAE;UAAAT,QAAA,EAAEO,IAAI,CAACG;QAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,OAAG,EAACG,IAAI,CAACI,IAAI;MAAA,GADxDJ,IAAI,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAELjB,OAAA;MAAAa,QAAA,EAAG;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACrB,eACDjB,OAAA,CAACF,IAAI;MAACuB,EAAE,EAAC,YAAY;MAAAR,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAACf,EAAA,CApCQD,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AAsClB,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}